---

- name: "Create Downloads folder"
  file:
    path: "{{ destination }}"
    state: directory

- name: "Update repositories cache." 
  apt:
    update_cache: yes

- name: "Safe system upgrade via aptitude."
  apt: 
    upgrade: safe        

- name: "Check if GitLab is already installed."
  stat: path=/usr/bin/gitlab-ctl
  register: gitlab_file

- name: "Install GitLab dependencies."
  package: name={{ item }} state=present
  with_items:
    - openssh-server
    - ca-certificates
    - curl    
    - openssl
    - tzdata

- name: "Download GitLab repository installation script."
  get_url:
    url: "{{ gitlab_repository_installation_script_url }}"
    dest: /tmp/gitlab_install_repository.sh
    validate_certs: "{{ gitlab_download_validate_certs }}"
  when: not gitlab_file.stat.exists

- name: "Install GitLab repository."
  command: bash /tmp/gitlab_install_repository.sh
  when: not gitlab_file.stat.exists

- name: "Define the Gitlab package name."
  set_fact:
    gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
  when: gitlab_version != ''

- name: "Install GitLab"
  package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  when: not gitlab_file.stat.exists

- name: Set GitLab external URL
  lineinfile:
    path: /etc/gitlab/gitlab.rb
    regexp: '^external_url'
    line: "external_url 'http://192.168.56.10/gitlab'"

- name: Set Unicorn port
  lineinfile:
    path: /etc/gitlab/gitlab.rb
    regexp: '^unicorn\[''port''\]'
    line: "unicorn['port'] = 8088"
    state: present

- name: Set initial root password in GitLab configuration
  lineinfile:
    path: /etc/gitlab/gitlab.rb
    regexp: '^#? gitlab_rails\[''initial_root_password''\]'
    line: "gitlab_rails['initial_root_password'] = 'Pierr01999.'"
    create: yes

- name: "Reconfigure GitLab"
  command: gitlab-ctl reconfigure
  when: not gitlab_file.stat.exists

- name: Check if user 'typw01' exists
  command: 'gitlab-rails runner "puts User.exists?(username: ''typw01'')"'
  register: user_exists
  changed_when: false

- name: Create user 'Peter Wilfried' with Rails console and generate token
  command: >
    gitlab-rails runner "
      u = User.new(username: 'typw01', email: 'typw@typw.com', name: 'Peter Wilfried', password: 'Pierr01999.', password_confirmation: 'Pierr01999.'); 
      u.skip_confirmation!;
      u.save!;
      token = PersonalAccessToken.new;
      token.user_id = User.find_by(username: 'typw01').id;
      token.name = 'default';
      token.scopes = ['api'];
      token.set_token('ypCa3Dzb23o5nvsixwPP');
      token.save!
    "
  when: "'false' in user_exists.stdout"

- name: "Reconfigure GitLab"
  command: gitlab-ctl reconfigure
  when: not gitlab_file.stat.exists

- name: Restart GitLab
  command: "{{ item }}"
  with_items:
    - gitlab-ctl reconfigure
    - gitlab-ctl restart unicorn
    - gitlab-ctl restart

- name: "Wait for GitLab to be ready"
  uri:
    url: "http://192.168.56.10/gitlab"
    status_code: 200
  register: gitlab_response
  until: gitlab_response is success
  retries: 7
  delay: 30

- name: Install curl
  apt:
    name: curl
    state: present

- name: Check if GitLab back project exists
  uri:
    url: "http://192.168.56.10/gitlab/api/v4/projects?search=lu.uni.e4l.platform.api.dev"
    method: GET
    headers:
      PRIVATE-TOKEN: "ypCa3Dzb23o5nvsixwPP"
    return_content: yes
    status_code: 200
  register: gitlab_back_project_check
  changed_when: false

- name: Create GitLab back project
  uri:
    url: "http://192.168.56.10/gitlab/api/v4/projects?name=lu.uni.e4l.platform.api.dev"
    method: POST
    headers:
      PRIVATE-TOKEN: "ypCa3Dzb23o5nvsixwPP"
    status_code: 201
    body_format: json
  when: gitlab_back_project_check.content == "[]"

- name: Check if GitLab front project exists
  uri:
    url: "http://192.168.56.10/gitlab/api/v4/projects?search=lu.uni.e4l.platform.frontend.dev"
    method: GET
    headers:
      PRIVATE-TOKEN: "ypCa3Dzb23o5nvsixwPP"
    return_content: yes
    status_code: 200
  register: gitlab_front_project_check
  changed_when: false

- name: Create GitLab front project
  uri:
    url: "http://192.168.56.10/gitlab/api/v4/projects?name=lu.uni.e4l.platform.frontend.dev"
    method: POST
    headers:
      PRIVATE-TOKEN: "ypCa3Dzb23o5nvsixwPP"
    status_code: 201
    body_format: json
  when: gitlab_front_project_check.content == "[]"