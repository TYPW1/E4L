---

- name: "Create Downloads folder"
  file:
    path: "{{ destination }}"
    state: directory

- name: "Update repositories cache." 
  apt:
    update_cache: yes

- name: "Safe system upgrade via aptitude."
  apt: 
    upgrade: safe        

- name: "Check if GitLab configuration file already exists."
  stat: path=/etc/gitlab/gitlab.rb
  register: gitlab_config_file

- name: "Check if GitLab is already installed."
  stat: path=/usr/bin/gitlab-ctl
  register: gitlab_file

- name: "Install GitLab dependencies."
  package: name={{ item }} state=present
  with_items:
    - openssh-server
    - ca-certificates
    - curl
    - openssl
    - tzdata

- name: "Download GitLab repository installation script."
  get_url:
    url: "{{ gitlab_repository_installation_script_url }}"
    dest: /tmp/gitlab_install_repository.sh
    validate_certs: "{{ gitlab_download_validate_certs }}"
  when: not gitlab_file.stat.exists

- name: "Install GitLab repository."
  command: bash /tmp/gitlab_install_repository.sh
  when: not gitlab_file.stat.exists

- name: "Define the Gitlab package name."
  set_fact:
    gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
  when: gitlab_version != ''

- name: "Install GitLab"
  package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  when: not gitlab_file.stat.exists

# - name: "Reset root password using gitlab-rails console"
#   command: >
#     gitlab-rails runner "
#     user = User.find_by(username: 'root');
#     if user
#       user.password = 'Pierr01999.';
#       user.password_confirmation = 'Pierr01999.';
#       user.save!;
#     end"
#   ignore_errors: yes
#   register: password_reset_output

# - name: "Show password reset output"
#   debug:
#     var: password_reset_output


# - name: "Show password reset output"
#   debug:
#     var: password_reset_output

- name: Set GitLab external URL
  lineinfile:
    path: /etc/gitlab/gitlab.rb
    regexp: '^external_url'
    line: "external_url 'http://192.168.56.10/gitlab'"

- name: Set Unicorn port
  lineinfile:
    path: /etc/gitlab/gitlab.rb
    regexp: '^unicorn\[''port''\]'
    line: "unicorn['port'] = 8088"
    state: present

- name: Restart GitLab
  command: "{{ item }}"
  with_items:
    - gitlab-ctl reconfigure
    - gitlab-ctl restart unicorn
    - gitlab-ctl restart

# - name: "Wait for GitLab to be ready"
#   uri:
#     url: "http://192.168.56.10/gitlab"
#     status_code: 200
#   register: gitlab_response
#   until: gitlab_response is success
#   retries: 7
#   delay: 30
